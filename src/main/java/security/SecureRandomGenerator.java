package security;
/**
* This class represents a random generator
*
* <p> This class is a secure random generator for int and byte types. Byte uses int, because the byte interface, although lower, does not allow for bound creation.
*
* @author  Rob
* @author  Sam
*/

import java.security.SecureRandom;
import java.util.Random;

public class SecureRandomGenerator {

    private static final int _MAX_BYTE_VALUE_AS_INTEGER = 254;

    private static SecureRandom _secureRandomGenerator = new SecureRandom();

    /*-------------------------------------------------------------------------------------------------
     * PUBLIC STATIC
     -------------------------------------------------------------------------------------------------*/

    /**
    * Generate a random byte with a given bound
    *
    * <p> This method generates a random byte with the given bound or the maximum
    * byte value, whichever is less
    *
    * @param bound the maximum byte value to create
    * @return the randomly generated byte
    */
    public static byte generateRandomByteWithBound(int bound) {
        validateBoundIsAPositiveByteValue(bound);
        return (byte) generateRandomIntWithBound(bound);
    }

    /**
    * Generate a random byte with a given bound
    *
    * <p> This method generates a random int with the given bound
    *
    * @param bound the maximum int value to create
    * @return the randomly generated int
    */
    public static int generateRandomIntWithBound(int bound) {
        validateBoundIsNotNegative(bound);
        byte[] randomByteArray = new byte[4];
        _secureRandomGenerator.nextBytes(randomByteArray);
        int randomNumber = (int) Math.abs((int)randomByteArray[0]);
        Random random = new Random(randomNumber);
        randomNumber = random.nextInt(bound);
        return randomNumber;
    }

    /*-------------------------------------------------------------------------------------------------
     * PRIVATE STATIC
     -------------------------------------------------------------------------------------------------*/
    private static void validateBoundIsNotNegative(int bound) {
        if(bound <= 0) {
            throw new SecureRandomGeneratorBoundError("SecureRandomGenerator: bound was negative");
        }
    }

    private static void validateBoundIsAPositiveByteValue(int bound) {
        if(bound <= 0 || bound > _MAX_BYTE_VALUE_AS_INTEGER) {
            throw new SecureRandomGeneratorBoundError("SecureRandomGenerator: bound was negative");
        }
    }
}
